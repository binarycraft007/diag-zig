const std = @import("std");
const mem = std.mem;

pub const Efs2Diag = enum(u16) {
    HELLO = 0,
    QUERY = 1,
    OPEN = 2,
    CLOSE = 3,
    READ = 4,
    WRITE = 5,
    SYMLINK = 6,
    READLINK = 7,
    UNLINK = 8,
    MKDIR = 9,
    RMDIR = 10,
    OPENDIR = 11,
    READDIR = 12,
    CLOSEDIR = 13,
    RENAME = 14,
    STAT = 15,
    LSTAT = 16,
    FSTAT = 17,
    CHMOD = 18,
    STATFS = 19,
    ACCESS = 20,
    DEV_INFO = 21,
    FACT_IMAGE_START = 22,
    FACT_IMAGE_READ = 23,
    FACT_IMAGE_END = 24,
    PREP_FACT_IMAGE = 25,
    PUT_DEPRECATED = 26,
    GET_DEPRECATED = 27,
    ERROR = 28,
    EXTENDED_INFO = 29,
    CHOWN = 30,
    BENCHMARK_START_TEST = 31,
    BENCHMARK_GET_RESULTS = 32,
    BENCHMARK_INIT = 33,
    SET_RESERVATION = 34,
    SET_QUOTA = 35,
    GET_GROUP_INFO = 36,
    DELTREE = 37,
    PUT = 38,
    GET = 39,
    TRUNCATE = 40,
    FTRUNCATE = 41,
    STATVFS_V2 = 42,
    MD5SUM = 43,
    HOTPLUG_FORMAT = 44,
    SHRED = 45,
    SET_IDLE_DEV_EVT_DUR = 46,
    HOTPLUG_DEVICE_INFO = 47,
    SYNC_NO_WAIT = 48,
    SYNC_GET_STATUS = 49,
    TRUNCATE64 = 50,
    FTRUNCATE64 = 51,
    LSEEK64 = 52,
    MAKE_GOLDEN_COPY = 53,
    FILESYSTEM_IMAGE_OPEN = 54,
    FILESYSTEM_IMAGE_READ = 55,
    FILESYSTEM_IMAGE_CLOSE = 56,
    MAKE_GOLDEN_COPY_V2 = 57,
    MAKE_GOLDEN_COPY_V2_GET_STATUS = 58,
    MAKE_FS_BACKUP_COPY = 59,
    MAKE_FS_BACKUP_COPY_GET_STATUS = 60,
};

const DiagSubsys = enum(u8) {
    OEM = 0,
    ZREX = 1,
    SD = 2,
    BT = 3,
    WCDMA = 4,
    HDR = 5,
    DIABLO = 6,
    TREX = 7,
    GSM = 8,
    UMTS = 9,
    HWTC = 10,
    FTM = 11,
    //REX = 12,
    OS = 12, // DIAG_SUBSYS_OS is equal to DIAG_SUBSYS_REX
    GPS = 13,
    WMS = 14,
    CM = 15,
    HS = 16,
    AUDIO_SETTINGS = 17,
    DIAG_SERV = 18,
    FS = 19,
    PORT_MAP_SETTINGS = 20,
    MEDIAPLAYER = 21,
    QCAMERA = 22,
    MOBIMON = 23,
    GUNIMON = 24,
    LSM = 25,
    QCAMCORDER = 26,
    MUX1X = 27,
    DATA1X = 28,
    SRCH1X = 29,
    CALLP1X = 30,
    APPS = 31,
    SETTINGS = 32,
    //GSDI = 33,
    UIMDIAG = 33, // DIAG_SUBSYS_UIMDIAG is equal to DIAG_SUBSYS_GSDI
    TMC = 34,
    USB = 35,
    PM = 36,
    DEBUG = 37,
    QTV = 38,
    CLKRGM = 39,
    DEVICES = 40,
    WLAN = 41,
    //PS_DATA_LOGGING = 42,
    PS = 42, // DIAG_SUBSYS_PS is equal to DIAG_SUBSYS_PS_DATA_LOGGING
    MFLO = 43,
    DTV = 44,
    RRC = 45,
    PROF = 46,
    TCXOMGR = 47,
    NV = 48,
    AUTOCONFIG = 49,
    PARAMS = 50,
    MDDI = 51,
    DS_ATCOP = 52,
    L4LINUX = 53,
    MVS = 54,
    CNV = 55,
    APIONE_PROGRAM = 56,
    HIT = 57,
    DRM = 58,
    DM = 59,
    FC = 60,
    MEMORY = 61,
    FS_ALTERNATE = 62,
    REGRESSION = 63,
    SENSORS = 64,
    FLUTE = 65,
    ANALOG = 66,
    APIONE_PROGRAM_MODEM = 67,
    LTE = 68,
    BREW = 69,
    PWRDB = 70,
    CHORD = 71,
    SEC = 72,
    TIME = 73,
    Q6_CORE = 74,
    COREBSP = 75,
    MFLO2 = 76,
    ULOG = 77,
    APR = 78,
    QNP = 79,
    STRIDE = 80,
    OEMDPP = 81,
    Q5_CORE = 82,
    USCRIPT = 83,
    NAS = 84,
    CMAPI = 85,
    SSM = 86,
    TDSCDMA = 87,
    SSM_TEST = 88,
    MPOWER = 89,
    QDSS = 90,
    CXM = 91,
    GNSS_SOC = 92,
    TTLITE = 93,
    FTM_ANT = 94,
    MLOG = 95,
    LIMITSMGR = 96,
    EFSMONITOR = 97,
    DISPLAY_CALIBRATION = 98,
    VERSION_REPORT = 99,
    DS_IPA = 100,
    SYSTEM_OPERATIONS = 101,
    CNSS_POWER = 102,
    LWIP = 103,
    IMS_QVP_RTP = 104,
    STORAGE = 105,
    WCI2 = 106,
    AOSTLM_TEST = 107,
    CFCM = 108,
    CORE_SERVICES = 109,
    CVD = 110,
    MCFG = 111,
    MODEM_STRESSFW = 112,
    DS_DS3G = 113,
    TRM = 114,
    IMS = 115,
    OTA_FIREWALL = 116,
    I15P4 = 117,
    QDR = 118,
    MCS = 119,
    MODEMFW = 120,
    QNAD = 121,
    F_RESERVED = 122,
    V2X = 123,
    QMESA = 124,
    SLEEP = 125,
    QUEST = 126,
    CDSP_QMESA = 127,
    PCIE = 128,
    QDSP_STRESS_TEST = 129,
    CHARGERPD = 130,
    LAST = 131,
    RESERVED_OEM_0 = 250,
    RESERVED_OEM_1 = 251,
    RESERVED_OEM_2 = 252,
    RESERVED_OEM_3 = 253,
    RESERVED_OEM_4 = 254,
    LEGACY = 255,
};

const DiagField = enum(u8) {
    VERNO_F = 0,
    ESN_F = 1,
    PEEKB_F = 2,
    PEEKW_F = 3,
    PEEKD_F = 4,
    POKEB_F = 5,
    POKEW_F = 6,
    POKED_F = 7,
    OUTP_F = 8,
    OUTPW_F = 9,
    INP_F = 10,
    INPW_F = 11,
    STATUS_F = 12,
    LOGMASK_F = 15,
    LOG_F = 16,
    NV_PEEK_F = 17,
    NV_POKE_F = 18,
    BAD_CMD_F = 19,
    BAD_PARM_F = 20,
    BAD_LEN_F = 21,
    BAD_MODE_F = 24,
    TAGRAPH_F = 25,
    MARKOV_F = 26,
    MARKOV_RESET_F = 27,
    DIAG_VER_F = 28,
    TS_F = 29,
    TA_PARM_F = 30,
    MSG_F = 31,
    HS_KEY_F = 32,
    HS_LOCK_F = 33,
    HS_SCREEN_F = 34,
    PARM_SET_F = 36,
    NV_READ_F = 38,
    NV_WRITE_F = 39,
    CONTROL_F = 41,
    ERR_READ_F = 42,
    ERR_CLEAR_F = 43,
    SER_RESET_F = 44,
    SER_REPORT_F = 45,
    TEST_F = 46,
    GET_DIPSW_F = 47,
    SET_DIPSW_F = 48,
    VOC_PCM_LB_F = 49,
    VOC_PKT_LB_F = 50,
    ORIG_F = 53,
    END_F = 54,
    SW_VERSION_F = 56,
    DLOAD_F = 58,
    TMOB_F = 59,
    //FTM_CMD_F = 59,
    EXT_SW_VERSION_F = 60,
    TEST_STATE_F = 61,
    STATE_F = 63,
    PILOT_SETS_F = 64,
    SPC_F = 65,
    BAD_SPC_MODE_F = 66,
    PARM_GET2_F = 67,
    SERIAL_CHG_F = 68,
    PASSWORD_F = 70,
    BAD_SEC_MODE_F = 71,
    PR_LIST_WR_F = 72,
    PR_LIST_RD_F = 73,
    SUBSYS_CMD_F = 75,
    FEATURE_QUERY_F = 81,
    SMS_READ_F = 83,
    SMS_WRITE_F = 84,
    SUP_FER_F = 85,
    SUP_WALSH_CODES_F = 86,
    SET_MAX_SUP_CH_F = 87,
    PARM_GET_IS95B_F = 88,
    FS_OP_F = 89,
    AKEY_VERIFY_F = 90,
    BMP_HS_SCREEN_F = 91,
    CONFIG_COMM_F = 92,
    EXT_LOGMASK_F = 93,
    EVENT_REPORT_F = 96,
    STREAMING_CONFIG_F = 97,
    PARM_RETRIEVE_F = 98,
    STATUS_SNAPSHOT_F = 99,
    RPC_F = 100,
    GET_PROPERTY_F = 101,
    PUT_PROPERTY_F = 102,
    GET_GUID_F = 103,
    USER_CMD_F = 104,
    GET_PERM_PROPERTY_F = 105,
    PUT_PERM_PROPERTY_F = 106,
    PERM_USER_CMD_F = 107,
    GPS_SESS_CTRL_F = 108,
    GPS_GRID_F = 109,
    GPS_STATISTICS_F = 110,
    ROUTE_F = 111,
    IS2000_STATUS_F = 112,
    RLP_STAT_RESET_F = 113,
    TDSO_STAT_RESET_F = 114,
    LOG_CONFIG_F = 115,
    TRACE_EVENT_REPORT_F = 116,
    SBI_READ_F = 117,
    SBI_WRITE_F = 118,
    SSD_VERIFY_F = 119,
    LOG_ON_DEMAND_F = 120,
    EXT_MSG_F = 121,
    ONCRPC_F = 122,
    PROTOCOL_LOOPBACK_F = 123,
    EXT_BUILD_ID_F = 124,
    EXT_MSG_CONFIG_F = 125,
    EXT_MSG_TERSE_F = 126,
    EXT_MSG_TERSE_XLATE_F = 127,
    SUBSYS_CMD_VER_2_F = 128,
    EVENT_MASK_GET_F = 129,
    EVENT_MASK_SET_F = 130,
    CHANGE_PORT_SETTINGS_F = 140,
    CNTRY_INFO_F = 141,
    SUPS_REQ_F = 142,
    MMS_ORIG_SMS_REQUEST_F = 143,
    MEAS_MODE_F = 144,
    MEAS_REQ_F = 145,
    QSR_EXT_MSG_TERSE_F = 146,
    DCI_CMD_REQ_F = 147,
    DCI_DELAYED_RSP_F = 148,
    BAD_TRANS_F = 149,
    SSM_DISALLOWED_CMD_F = 150,
    LOG_ON_DEMAND_EXT_F = 151,
    MULTI_RADIO_CMD_F = 152,
    QSR4_EXT_MSG_TERSE_F = 153,
    DCI_CONTROL_PACKET = 154,
    COMPRESSED_PKT = 155,
    MSG_SMALL_F = 156,
    QSH_TRACE_PAYLOAD_F = 157,
    //MAX_F = 157,
};

pub const Header = packed struct {
    cmd_code: u8,
    subsys_id: u8,
    subsys_cmd_code: u16,
};

pub const Efs2DiagHelloReq = packed struct {
    pub const size = @bitOffsetOf(Efs2DiagHelloReq, "padding") / 8;

    header: Header = .{
        .cmd_code = @intFromEnum(DiagField.SUBSYS_CMD_F),
        .subsys_id = @intFromEnum(DiagSubsys.FS),
        .subsys_cmd_code = @intFromEnum(Efs2Diag.HELLO),
    },
    targ_pkt_window: u32 = 0x100000, // Window size in packets for sends from phone
    targ_byte_window: u32 = 0x100000, // Window size in bytes for sends from phone
    host_pkt_window: u32 = 0x100000, // Window size in packets for sends from host
    host_byte_window: u32 = 0x100000, // Window size in bytes for sends from host
    iter_pkt_window: u32 = 0x100000, // Window size in packets for dir iteration
    iter_byte_window: u32 = 0x100000, // Window size in bytes for dir iteration
    version: u32 = 1, // Protocol version number
    min_version: u32 = 1, // Smallest supported protocol version number
    max_version: u32 = 1, // Highest supported protocol version number
    feature_bits: u32 = 0xffffffff, // Feature bit mask; one bit per feature
    padding: u32 = 0,

    pub fn asBytes(self: *Efs2DiagHelloReq) []const u8 {
        return mem.asBytes(self)[0..size];
    }
};

pub const Efs2DiagHelloRsp = Efs2DiagHelloReq;
